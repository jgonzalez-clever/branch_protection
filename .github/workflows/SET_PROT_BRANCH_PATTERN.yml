
name: Set Branch Protection Pattern

on:
  workflow_dispatch:

jobs:
  Branch-Protection:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
      
      - id: read-json-config
        run: echo "BRANCH_CONFIGURATION=$(jq -c . < ./branch_protection.json)" >> $GITHUB_OUTPUT

      - name: Set branch protection rules on selected reposiories
        run: |
          # LISTAR REPOS
          REPOS=$(jq -r '.repositories[].repo_name' repositoriesPattern.json) && echo $repo_name
          owner=$(jq -r '.owner' repositoriesPattern.json) && echo $owner
          rules=$(rules.txt)


          # LOOP DE REPOS
          for u in $REPOS
          do
            for BRANCH in $(jq -r --arg REPO "$u" '.repositories[] | select(.repo_name == $REPO) | .branches[].branch_name' repositoriesPattern.json)
            do
              echo "debug repo: $u"

              REPOSITORY_ID=$(curl -s -H "Authorization: bearer ${{ secrets.GH_PAT }}" \
                -H "Accept: application/vnd.github.v3+json" \
                "https://api.github.com/repos/$owner/$u" \
                | jq -r '.node_id')

              # Crear la protecci√≥n de rama utilizando el nuevo ID
              curl -X POST \
                -H "Authorization: bearer ${{ secrets.GH_PAT }}" \
                -H "Accept: application/vnd.github.v3+json" \
                -H "Content-Type: application/json" \
                "https://api.github.com/graphql" \
                -d '{
                  "query": "mutation CreateBranchProtectionRule($input: CreateBranchProtectionRuleInput!) { createBranchProtectionRule(input: $input) { branchProtectionRule { id } } }",
                  "variables": {
                    "input": {
                      "repositoryId": "'"$REPOSITORY_ID"'",
                      "pattern": "'"$BRANCH"'",
                      "'"$rules"'" 
                    }
                  }
                }'
            done        
          done

